{
    "layout": "function.jade",
    "data": [
        {
            "name": "Class",
            "desc": "Create JavaScript class.",
            "params": [
                {
                    "name": "methods",
                    "type": "object",
                    "desc": "Public methods."
                },
                {
                    "name": "statics",
                    "type": "object",
                    "desc": "Static methods."
                }
            ],
            "return": {
                "type": "function",
                "desc": "Result function used to create instances"
            }
        },
        {
            "name": "allKeys",
            "desc": "Retrieve all the names of object's own and inherited properties.",
            "params": [
                {
                    "name": "object",
                    "type": "object",
                    "desc": "The object to query."
                }
            ],
            "return": {
                "type": "array",
                "desc": "Returns the array of all property names."
            },
            "detail": "<pre><code class=\"language-javascript\">var obj = Object.create({ a: 0 });\nobj.b = 1;\n_.allKeys(obj) // -&gt; [&#39;a&#39;, &#39;b&#39;]\n</code></pre>\n<blockquote>\n<p>Members of Object&#39;s prototype won&#39;t be retrieved.</p>\n</blockquote>\n"
        },
        {
            "name": "bind",
            "desc": "Create a function bound to a given object.",
            "params": [
                {
                    "name": "function",
                    "type": "function",
                    "desc": "The function to bind."
                },
                {
                    "name": "context",
                    "type": "*",
                    "desc": "This binding of given function."
                },
                {
                    "name": "[rest]",
                    "type": "...*",
                    "desc": "Optional arguments."
                }
            ],
            "return": {
                "type": "function",
                "desc": "Returns the new bound function."
            },
            "detail": "<pre><code class=\"language-javascript\">var fn = _.bind(function (msg)\n{\n    console.log(this.name + &#39;:&#39; + msg);\n}, {name: &#39;eustia&#39;}, &#39;I am a utility library.&#39;);\nfn(); // -&gt; &#39;eustia: I am a utility library.&#39;\n</code></pre>\n"
        },
        {
            "name": "camelCase",
            "desc": "Convert string to \"camelCase\" text."
        },
        {
            "name": "dasherize",
            "desc": "Convert string to \"dashCase\"."
        },
        {
            "name": "endWith",
            "desc": "Checks if string ends with the given target string.",
            "params": [
                {
                    "name": "string",
                    "type": "string",
                    "desc": "The string to search."
                },
                {
                    "name": "suffix",
                    "type": "string",
                    "desc": "String suffix."
                }
            ],
            "return": {
                "type": "boolean",
                "desc": "Returns true if string ends with target, else false"
            }
        },
        {
            "name": "has",
            "desc": "Checks if key is a direct property.",
            "params": [
                {
                    "name": "object",
                    "type": "object",
                    "desc": "The object to query."
                },
                {
                    "name": "key",
                    "type": "string",
                    "desc": "The path to check."
                }
            ],
            "return": {
                "type": "boolean",
                "desc": "Returns true if key is a direct property, else false"
            }
        },
        {
            "name": "identity",
            "desc": "This method returns the first argument provided to it.",
            "params": [
                {
                    "name": "value",
                    "type": "*",
                    "desc": "Any value."
                }
            ],
            "return": {
                "type": "*",
                "desc": "Returns value"
            }
        },
        {
            "name": "inherits",
            "desc": "Inherit the prototype methods from one constructor into another.",
            "params": [
                {
                    "name": "Class",
                    "type": "function",
                    "desc": "Child Class."
                },
                {
                    "name": "SuperClass",
                    "type": "function",
                    "desc": "Super Class"
                }
            ]
        },
        {
            "name": "invert",
            "desc": "Creates an object composed of the inverted keys and values of object.",
            "params": [
                {
                    "name": "object",
                    "type": "object",
                    "desc": "The object to invert."
                }
            ],
            "return": {
                "type": "object",
                "desc": "Returns the new inverted object."
            },
            "detail": "<p>If object contains duplicate values, subsequent values overwrite property\nassignments of previous values unless multiValue is true.</p>\n"
        },
        {
            "name": "isArgs",
            "desc": "Checks if value is classified as an arguments object.",
            "params": [
                {
                    "name": "value",
                    "type": "*",
                    "desc": "The value to check."
                }
            ],
            "return": {
                "type": "boolean",
                "desc": "Returns true if value is correctly classified, else false"
            }
        },
        {
            "name": "isArr",
            "desc": "Check if value is classified as an Array Object",
            "params": [
                {
                    "name": "value",
                    "type": "*",
                    "desc": "The value to check."
                }
            ],
            "return": {
                "type": "boolean",
                "desc": "Returns true if value is correctly classified, else false"
            }
        },
        {
            "name": "isBool",
            "desc": "Checks if value is classified as a boolean primitive or object.",
            "params": [
                {
                    "name": "val",
                    "type": "*",
                    "desc": "The value to check."
                }
            ],
            "return": {
                "type": "boolean",
                "desc": "Returns true if value is correctly classified, else false"
            }
        },
        {
            "name": "isDate",
            "desc": "Checks if value is classified as a Date object.",
            "params": [
                {
                    "name": "val",
                    "type": "*",
                    "desc": "The value to check."
                }
            ],
            "return": {
                "type": "boolean",
                "desc": "Returns true if value is correctly classified, else false"
            }
        },
        {
            "name": "isErr",
            "desc": "Checks if value is an Error.",
            "params": [
                {
                    "name": "value",
                    "type": "*",
                    "desc": "The value to check."
                }
            ],
            "return": {
                "type": "boolean",
                "desc": "Returns true if value is an error object, else false"
            }
        },
        {
            "name": "isFn",
            "desc": "Checks if value is classified as a Function object.",
            "params": [
                {
                    "name": "value",
                    "type": "*",
                    "desc": "The value to check."
                }
            ],
            "return": {
                "type": "boolean",
                "desc": "Returns true if value is correctly classified, else false"
            }
        },
        {
            "name": "isInt",
            "desc": "Checks if value is classified as a Integer.",
            "params": [
                {
                    "name": "value",
                    "type": "*",
                    "desc": "The value to check."
                }
            ],
            "return": {
                "type": "boolean",
                "desc": "Returns true if value is correctly classified, else false"
            }
        },
        {
            "name": "isNum",
            "desc": "Checks if value is classified as a Number primitive or object.",
            "params": [
                {
                    "name": "value",
                    "type": "*",
                    "desc": "The value to check."
                }
            ],
            "return": {
                "type": "boolean",
                "desc": "Returns true if value is correctly classified, else false"
            }
        },
        {
            "name": "isObj",
            "desc": "Checks if value is the language type of Object.",
            "params": [
                {
                    "name": "value",
                    "type": "*",
                    "desc": "The value to check."
                }
            ],
            "return": {
                "type": "boolean",
                "desc": "Returns true if value is an object, else false"
            }
        },
        {
            "name": "isStr",
            "desc": "Checks if value is classified as a String primitive or object.",
            "params": [
                {
                    "name": "value",
                    "type": "*",
                    "desc": "The value to check."
                }
            ],
            "return": {
                "type": "boolean",
                "desc": "Returns true if value is correctly classified, else false"
            }
        },
        {
            "name": "isUndef",
            "desc": "Checks if value is undefined.",
            "params": [
                {
                    "name": "value",
                    "type": "*",
                    "desc": "The value to check."
                }
            ],
            "return": {
                "type": "boolean",
                "desc": "Returns true if value is undefined, else false."
            },
            "detail": "<pre><code class=\"language-javascript\">_.isUndef(void 0) // -&gt; true\n_.isUndef(null) // -&gt; false\n</code></pre>\n<p>Just a shortcut for <strong>x === undefined</strong>, doesn&#39;t matter that much whether you\nuse it or not.</p>\n"
        },
        {
            "name": "keys",
            "desc": "Creates an array of the own enumerable property names of object.",
            "params": [
                {
                    "name": "object",
                    "type": "object",
                    "desc": "The object to query."
                }
            ],
            "return": {
                "type": "array",
                "desc": "Returns the array of property names"
            }
        },
        {
            "name": "last",
            "desc": "Gets the last element of array.",
            "params": [
                {
                    "name": "array",
                    "type": "array",
                    "desc": "The array to query."
                }
            ],
            "return": {
                "type": "*",
                "desc": "Returns the last element of array"
            }
        },
        {
            "name": "lpad",
            "desc": "Pads string on the left side if it's shorter than length.",
            "params": [
                {
                    "name": "string",
                    "type": "string",
                    "desc": "The string to pad."
                },
                {
                    "name": "length",
                    "type": "number",
                    "desc": "The padding length."
                },
                {
                    "name": "chars",
                    "type": "string",
                    "desc": "The string used as padding."
                }
            ],
            "detail": "<p>&#39;repeat&#39;;\nlpad = function (str, len, chars)\n{\n    var strLen = str.length;\n    return strLen &lt; len ? repeat(chars, len - strLen) + str : str;</p>\n"
        },
        {
            "name": "noop",
            "desc": "A no-operation function that returns undefined regardless of the arguments it receives."
        },
        {
            "name": "now",
            "desc": "Gets the number of milliseconds that have elapsed since the Unix epoch."
        },
        {
            "name": "pad",
            "desc": "Pads string on the left and right sides if it's shorter than length.",
            "params": [
                {
                    "name": "string",
                    "type": "string",
                    "desc": "The string to pad."
                },
                {
                    "name": "length",
                    "type": "number",
                    "desc": "The padding length."
                },
                {
                    "name": "chars",
                    "type": "string",
                    "desc": "The string used as padding."
                }
            ],
            "detail": "<p>&#39;repeat&#39;;\npad = function (str, len, chars)\n{\n    var padLen = len - str.length;\n    return repeat(chars, Math.ceil(padLen / 2)) + str +\n           repeat(chars, Math.floor(padLen /2));</p>\n"
        },
        {
            "name": "random",
            "desc": "Produces a random number between min and max (inclusive).",
            "params": [
                {
                    "name": "min",
                    "type": "number",
                    "desc": "The minimum possible value."
                },
                {
                    "name": "max",
                    "type": "number",
                    "desc": "The maximum possible value."
                }
            ],
            "return": {
                "type": "number",
                "desc": "Returns the random number"
            }
        },
        {
            "name": "repeat",
            "desc": "Repeat string n-times.",
            "params": [
                {
                    "name": "string",
                    "type": "string",
                    "desc": "The string to repeat."
                },
                {
                    "name": "n",
                    "type": "number",
                    "desc": "Repeat times."
                }
            ],
            "return": {
                "type": "string",
                "desc": "Repeated string"
            }
        },
        {
            "name": "restArgs",
            "desc": "This accumulates the arguments passed into an array, after a given index.",
            "params": [
                {
                    "name": "function",
                    "type": "function",
                    "desc": "Function that needs rest parameters."
                },
                {
                    "name": "startIndex",
                    "type": "number",
                    "desc": "The start index to accumulates."
                }
            ],
            "return": {
                "type": "function",
                "desc": "Generated function with rest parameters."
            },
            "detail": "<pre><code class=\"language-javascript\">var paramArr = _.restArs(function (rest) { return rest });\nparamArr(1, 2, 3, 4); // -&gt; [1, 2, 3, 4]\n</code></pre>\n"
        },
        {
            "name": "rpad",
            "desc": "Pads string on the right side if it's shorter than length.",
            "params": [
                {
                    "name": "string",
                    "type": "string",
                    "desc": "The string to pad."
                },
                {
                    "name": "length",
                    "type": "number",
                    "desc": "Padding length."
                },
                {
                    "name": "chars",
                    "type": "string",
                    "desc": "String used as padding."
                }
            ],
            "return": {
                "type": "string",
                "desc": "Resulted string."
            },
            "detail": "<p>&#39;repeat&#39;;\nrpad = function (str, len, chars)\n{\n    var strLen = str.length;\n    return strLen &lt; len ? str + repeat(chars, len - strLen): str;</p>\n"
        },
        {
            "name": "startWith",
            "desc": "Checks if string starts with the given target string.",
            "params": [
                {
                    "name": "string",
                    "type": "string",
                    "desc": "The string to search."
                },
                {
                    "name": "prefix",
                    "type": "string",
                    "desc": "String prefix."
                }
            ],
            "return": {
                "type": "boolean",
                "desc": "Returns true if string starts with prefix, else false"
            }
        }
    ]
}